/*meal(m1, white).
meal(m2, red).
meal(m3, white).
meal(m3, red).

vegetarian(m3).
vegetarian(X) :- meal(X, Y),  \+nonvegetarian(X), \+pork(X), \+beef(X).

nonvegetarian(X) :- meal(X, Y), beef(X), \+vegetarian(X).

pork(X) :- meal(X, Y), nonvegetarian(X),\+ beef(X).
pork(X) :- meal(X, white), nonvegetarian(X), \+ fish(X).

beef(X) :- meal(X, red), \+ vegetarian(X), \+ pork(X).

fish(X) :- meal(X, white), \+ pork(X), \+ beef(X).
*/

/*======================================================*/
//meal(m1, white).
//meal(m2, red).
//meal(m3, white).
//meal(m3, red).
String[][] meal = {{"m1", "white"}, {"m2", "red"}, {"m3", "white"}, {"m3", "red"}};

//vegetarian(m3).
//vegetarian(X) :- meal(X, Y),  \+nonvegetarian(X), \+pork(X), \+beef(X).

String[][] v1 = {{"m3"}};
RecursiveOperator vegetarian = new Union(
                    v1, new AntiJoin(
                             meal, new Union(
                                     nonvegetarian, new Union(
                                                     pork, beef ) ),
                             (t1,t2) -> {
                                    if (t1.get(0) == t2.get(0)) return null;
                                    Tuple t3 = new Tuple();
                                    t3.add(t1.get(0));
                                    return t3 
                                }
                            )
                       );
//nonvegetarian :- meal(X, Y), beef(X), \+vegetarian(X).

RecursiveOperator nonvegetarian = new AntiJoin(new Join(meal, beef, (t1.t2) -> {
                                                                if (t1.get(0) != t2.get(0)) return null;
                                                                return t2;
                                                            }
                                                        ), 
                                                vegetarian, (t1,t2)->{
                                                                if (t1.get(0) == t2.get(0)) return null;
                                                                return t1;
                                                            }
                                                );                                        

//pork(X) :- meal(X, Y), nonvegetarian(X),\+ beef(X).
//pork(X) :- meal(X, white), nonvegetarian(X), \+ fish(X).
RecursiveOperator pork = Union(new AntiJoin(new Join(meal, nonvegetarian, (t1,t2)->{
                                                                                    if (t1.get(0) != t2.get(0)) return null;
                                                                                    return t2;
                                                                               }), 
                                            beef, (t1,t2) -> {
                                                       if (t1.get(0) == t2.get(0)) return null;
                                                       return t1;                                                                 
                                                   }),
                               new AntiJoin(new Join(meal, nonvegetarian, (t1,t2) -> {
                                                                                if (t1.get(0) != t2.get(0)) return null;
                                                                                if (t1.get(1) != "white") return null;
                                                                                return t2;
                                                                            }),
                                            fish, (t1,t2) -> {
                                                            if (t1.get(0) == t2.get(0)) return null;
                                                            return t1;
                                                        }
                               )                              
                          );

//beef(X) :- meal(X, red), \+ vegetarian(X), \+ pork(X).
RecursiveOperator beef = new AntiJoin(meal, new Union(vegetarian, pork), (t1,t2) -> {
                                                      if (t1.get(0) == t2.get(0)) return null;
                                                      if (t1.get(1) != "red") return null;
                                                      Tuple t3 = new Tuple();
                                                      t3.add(t1.get(0));
                                                      return t3;                                                    
                                                }                                                     
                            );

//fish(X) :- meal(X, white), \+ pork(X), \+ beef(X).
RecursiveOperator fish = new AntiJoin(meal, new Union(pork, beef), (t1,t2) -> {
                                                if (t1.get(0) == t2.get(0)) return null;
                                                if (t1.get(1) != "white") return null;
                                                Tuple t3 = new Tuple();
                                                t3.add(t1.get(0));
                                                return t3;                                                    
                                           }               
                                );





                               
